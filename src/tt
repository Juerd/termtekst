#!/usr/bin/python
# -*- coding: UTF-8 -*-

import sys
import curses
import requests
import locale
import re
import os

from datetime import datetime
from json import loads

# Teletekst baseURL
TELETEKST = 'https://teletekst-data.nos.nl/json/%s'
TTRC = os.path.expanduser('~/.ttrc')

# Tested with python2.7 and python3.5
PY3K = False
double_width = False
if sys.version_info.major == 3:
    PY3K = True
    from html.parser import HTMLParser
    import configparser as ConfigParser
    unichr = chr
else:
    from HTMLParser import HTMLParser
    import ConfigParser

tt_re = re.compile(u'([\U0000f020-\U0000f100])')
wc_re = re.compile(u'([\U00000020-\U0000007f])')
locale.setlocale(locale.LC_ALL, '')

html = HTMLParser()

# Map teletext graphics (2x3) to braille (2x4)
#
#  01 02      01 08
#  04 08 ==>  02 10
#  10 20      04 20
#             40 80

tt_to_br = {
    0x01: 0x03, 0x02: 0x18, 0x04: 0x06,
    0x08: 0x30, 0x10: 0x44, 0x20: 0xa0,
}

tt_to_br_wide = [
    { 0x01: 0x1b, 0x04: 0x36, 0x10: 0xe4 },
    { 0x02: 0x1b, 0x08: 0x36, 0x20: 0xe4 },
]

colors_fg = {
    'blue': curses.COLOR_BLUE,
    'cyan': curses.COLOR_CYAN,
    'green': curses.COLOR_GREEN,
    'magenta': curses.COLOR_MAGENTA,
    'red': curses.COLOR_RED,
    'white': curses.COLOR_WHITE,
    'yellow': curses.COLOR_YELLOW,
}

colors_bg = {
    'bg-blue': curses.COLOR_BLUE,
    'bg-cyan': curses.COLOR_CYAN,
    'bg-green': curses.COLOR_GREEN,
    'bg-magenta': curses.COLOR_MAGENTA,
    'bg-red': curses.COLOR_RED,
    'bg-white': curses.COLOR_WHITE,
    'bg-yellow': curses.COLOR_YELLOW,
}

bookmarks = {
    '!': '100', '@': '200', '#': '300', '$': '400',
    '%': '500', '^': '600', '&': '700', '*': '800',
}

def load(page):
    response = requests.get(TELETEKST % page)
    if not response.status_code == 200:
        return {}
    content = loads(response.content.decode('utf-8'))
    return content


def braille_graph(c):
    n = ord(c.group(1)) - 0xf020
    if n >= 64: n = n - 32
    o = ""
    if double_width:
        for w in tt_to_br_wide:
            m = 0
            for v in w:
                if n & v: m = m | w[v]
            o = o + unichr(0x2800 + m)
    else:
        m = 0
        for v in tt_to_br:
            if n & v: m = m | tt_to_br[v]
        o = o + unichr(0x2800 + m)
    return o


def double_width_char(c):
    n = ord(c.group(1))
    if n >= 0x21 and n <= 0x7f:
        return unichr(n + 0xff00 - 0x20)
    else:
        return "  "


def fix_chars(l):
    l = tt_re.sub(braille_graph, l)
    if double_width:
        l = wc_re.sub(double_width_char, l)
    if PY3K:
        return l
    return l.encode('utf-8')


def show_line(scr, l):

    class Parser(HTMLParser):

        def __init__(self):
            HTMLParser.__init__(self)
            self.bg = 0

        def handle_starttag(self, tag, attrs):
            self.fg = 7
            for attr in attrs:
                if attr[0] == "class":
                    for c in re.finditer("(\S+)", attr[1]):
                        c = c.group(1)
                        if c in colors_fg:
                            self.fg = colors_fg[c]
                        if c in colors_bg:
                            self.bg = colors_bg[c]

            attr = 0
            if self.bg > 0:
                attr = curses.color_pair(self.fg*8 + self.bg) + curses.A_REVERSE
            else:
                attr = curses.color_pair(self.bg*8 + self.fg)

            scr.attrset(attr + curses.A_BOLD)

        def handle_endtag(self, tag):
            pass

        def handle_data(self, data):
            scr.addstr(fix_chars(data))

    scr.attrset(0)
    parser = Parser()
    parser.feed(l)


def show(scr, p, page):
    scr.erase()
    if 'content' in p:
        ls = p['content'].split('\n')
        y = 0
        for l in ls:
            scr.attrset(0)
            scr.addstr(0, 3, datetime.now().strftime('%H:%M:%S'))
            try:
                scr.move(y, 0)
                show_line(scr, html.unescape(l))
            except:
                pass
            y = y + 1
    else:
        scr.addstr(0, 36, page)
        scr.addstr(10, 12, " nothing here  ")


def main(scr):

    if os.path.isfile(TTRC):
        p = ConfigParser.SafeConfigParser()
        p.read(TTRC)
        for k, v in p.items('bookmarks'):
            bookmarks[k] = v

    curses.noecho()
    curses.cbreak()
    curses.halfdelay(1)
    curses.mousemask(1)
    curses.start_color()
    curses.curs_set(0)

    page = '100'
    page_user = ''
    page_next = ''
    ticks_idle = 0

    if len(sys.argv) > 1:
        page = sys.argv[1]

    for i in range(1, 64):
        curses.init_pair(i,(i % 8), int(i/8))

    p = load(page)

    while True:

        show(scr, p, page)

        if len(page_user) > 0:
            scr.addstr(0, 36, page_user + '   ')

        c = scr.getch()

        if c == -1:
            ticks_idle = ticks_idle + 1
            if ticks_idle == 10:
                page_user = ''
        else:
            ticks_idle = 0

        if c == curses.KEY_MOUSE:
            b, x, y, _, _ = curses.getmouse()
            if b == 0:
                for c2 in re.finditer("(\d{3})", scr.instr(y, x-3, 5).decode()):
                    page_next = c2.group(1)
        if c == ord('q'):
            break
        if c == ord('d'):
            global double_width
            double_width = not double_width
        if c > 0 and c < 255 and chr(c) in bookmarks:
            page_next = bookmarks[chr(c)]
        if c == curses.KEY_DOWN or c == curses.KEY_PPAGE or c == ord('j') or c == ord(','):
            page_next = p.get('prevSubPage')
        if c == curses.KEY_UP or c == curses.KEY_NPAGE or c == ord('k') or c == ord('.'):
            page_next = p.get('nextSubPage')
        if c == curses.KEY_LEFT or c == ord('h') or c == ord('['):
            page_next = p.get('prevPage')
        if c == curses.KEY_RIGHT or c == ord('l') or c == ord(']'):
            page_next = p.get('nextPage')
        if c == curses.KEY_HOME or c == 1:  # 1 is ctrl+A
            page_next = '100'
        if c >= ord('0') and c <= ord('9'):
            page_user = page_user + chr(c)
            if len(page_user) == 3:
                page_next = page_user
                page_user = ''

        if page_next and len(page_next) > 0:
            page = page_next
            page_next = None
            scr.addstr(9,  12, "               ")
            scr.addstr(10, 12, "    Loading    ")
            scr.addstr(11, 12, "               ")
            scr.refresh()
            p = load(page)


curses.wrapper(main)

# vi: ft=python
